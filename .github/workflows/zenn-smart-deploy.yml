# .github/workflows/zenn-smart-deploy.yml
name: Zenn Smart Deploy

on:
  schedule:
    # 6時間おきに実行
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '強制デプロイ（24時間制限を無視）'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # 最後のデプロイ時刻をチェック
    - name: Check last deploy time
      id: check_timing
      run: |
        # 最後の成功したデプロイを探す
        LAST_DEPLOY_COMMIT=$(git log --grep="Zenn deploy success" --format="%H" -n 1)
        
        if [ -z "$LAST_DEPLOY_COMMIT" ]; then
          echo "can_deploy=true" >> $GITHUB_OUTPUT
          echo "reason=First deployment" >> $GITHUB_OUTPUT
        else
          # 最後のデプロイから24時間経過したかチェック
          LAST_DEPLOY_TIME=$(git show -s --format=%ct $LAST_DEPLOY_COMMIT)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_DEPLOY_TIME))
          HOURS_PASSED=$((TIME_DIFF / 3600))
          
          if [ $HOURS_PASSED -ge 24 ] || [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "can_deploy=true" >> $GITHUB_OUTPUT
            echo "reason=24 hours passed (${HOURS_PASSED}h) or forced" >> $GITHUB_OUTPUT
          else
            echo "can_deploy=false" >> $GITHUB_OUTPUT
            REMAINING_HOURS=$((24 - HOURS_PASSED))
            echo "reason=Need to wait ${REMAINING_HOURS} more hours" >> $GITHUB_OUTPUT
          fi
        fi
    
    # 新しい記事の変更をチェック
    - name: Check for article changes
      id: check_articles
      if: steps.check_timing.outputs.can_deploy == 'true'
      run: |
        # 最後のデプロイ以降の記事変更をチェック
        LAST_DEPLOY_COMMIT=$(git log --grep="Zenn deploy success" --format="%H" -n 1)
        
        if [ -z "$LAST_DEPLOY_COMMIT" ]; then
          # 初回の場合、全ての記事をチェック
          NEW_ARTICLES=$(find articles/ -name "*.md" -o -name "*.mdx" 2>/dev/null | wc -l)
        else
          # 変更された記事をチェック
          NEW_ARTICLES=$(git diff --name-only $LAST_DEPLOY_COMMIT HEAD articles/ | grep -E "\.(md|mdx)$" | wc -l)
        fi
        
        echo "article_count=$NEW_ARTICLES" >> $GITHUB_OUTPUT
        
        if [ $NEW_ARTICLES -gt 0 ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          # 変更された記事一覧を表示
          echo "Changed articles:"
          if [ -z "$LAST_DEPLOY_COMMIT" ]; then
            find articles/ -name "*.md" -o -name "*.mdx" 2>/dev/null || echo "No articles found"
          else
            git diff --name-only $LAST_DEPLOY_COMMIT HEAD articles/ | grep -E "\.(md|mdx)$" || echo "No article changes"
          fi
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
    
    # 実際のデプロイ実行
    - name: Deploy to Zenn
      if: steps.check_timing.outputs.can_deploy == 'true' && steps.check_articles.outputs.has_changes == 'true'
      run: |
        echo "Deploying ${{ steps.check_articles.outputs.article_count }} articles to Zenn..."
        echo "Deploy reason: ${{ steps.check_timing.outputs.reason }}"
        
        # Git設定
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # デプロイ成功をマーク
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        git commit --allow-empty -m "Zenn deploy success: $TIMESTAMP

        Deployed ${{ steps.check_articles.outputs.article_count }} articles
        Reason: ${{ steps.check_timing.outputs.reason }}"
        
        git push origin main
        
        echo "✅ Deployment completed successfully!"
    
    # スキップした場合の理由表示
    - name: Skip deployment
      if: steps.check_timing.outputs.can_deploy != 'true' || steps.check_articles.outputs.has_changes != 'true'
      run: |
        if [ "${{ steps.check_timing.outputs.can_deploy }}" != "true" ]; then
          echo "⏰ Deployment skipped: ${{ steps.check_timing.outputs.reason }}"
        elif [ "${{ steps.check_articles.outputs.has_changes }}" != "true" ]; then
          echo "📝 No new articles to deploy"
        fi
        
        # 次回実行予定を表示
        NEXT_RUN=$(date -d "+6 hours" '+%Y-%m-%d %H:%M:%S UTC')
        echo "Next check scheduled at: $NEXT_RUN"
