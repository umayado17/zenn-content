# .github/workflows/qiita-publish.yml
name: Publish changed articles to Qiita

on:
  push:
    branches: [ main, master ]
    paths: [ 'public/**' ]   # publicÈÖç‰∏ã„ÅÆÂ§âÊõ¥„ÅÆ„Åø„ÅßËµ∑Âãï
  workflow_dispatch:
    inputs:
      force_full:
        description: 'ÂÖ®Ë®ò‰∫ã„ÇíÂØæË±°„Å´„Åô„ÇãÔºà„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉàÁî®Ôºâ'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Â∑ÆÂàÜÂèñÂæó„ÅÆ„Åü„ÇÅÂ±•Ê≠¥„ÅåÂøÖË¶Å

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - run: npm i @qiita/qiita-cli --save-dev

      - name: Setup Qiita CLI credentials
        shell: bash
        run: |
          mkdir -p ~/.config/qiita-cli
          cat > ~/.config/qiita-cli/credentials.json <<'EOF'
          {
            "default": "default",
            "credentials": [
              {
                "name": "default",
                "accessToken": "${{ secrets.QIITA_TOKEN }}"
              }
            ]
          }
          EOF
          echo "== credentials.json =="
          cat ~/.config/qiita-cli/credentials.json
                    
      # front matter „ÅÆÂûãÂ¥©„Çå‰∫àÈò≤„ÄÇÊñ∞Ë¶è„ÅØ `id: ""` „ÅåÂâçÊèê„ÄÇ
      - name: Sanitize front matter
        run: |
          find public -name '*.md' -print0 | xargs -0 sed -i 's/^id:\s*null\s*$/id: ""/'
          find public -name '*.md' -print0 | xargs -0 sed -i 's/^updated_at:\s*".*"\s*$/updated_at: ""/'
          # ÂÖ®ËßíÂºïÁî®Á¨¶„ÅÆÈô§ÂéªÔºàË™§„Éë„Éº„ÇπÂØæÁ≠ñÔºâ
          find public -name '*.md' -print0 | xargs -0 sed -i 's/[‚Äú‚Äù]//g'

      # ‰ªäÂõû„ÅÆ push „ÅßÂ§â„Çè„Å£„Åü md „ÇíÊäΩÂá∫ÔºàËøΩÂä†/Â§âÊõ¥/„É™„Éç„Éº„É†Ôºâ
      - name: Detect changed markdowns
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE_SHA="${{ github.event.before }}"
          # ÊâãÂãïÂÆüË°å or before„ÅåÂèñ„Çå„Å™„ÅÑ„Ç±„Éº„Çπ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
          if [ -z "${BASE_SHA}" ] || ! git cat-file -e "${BASE_SHA}^{commit}" 2>/dev/null; then
            BASE_SHA="$(git rev-parse HEAD~1)"
          fi

          if [ "${{ inputs.force_full || false }}" = "true" ]; then
            echo "files<<EOF" >> $GITHUB_OUTPUT
            find public -name '*.md' | sort >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          CHANGED=$(git diff --name-only --diff-filter=ACMR "${BASE_SHA}" HEAD | grep -E '^public/.*\.md$' || true)

          # ÁîªÂÉèÁ≠â„ÅÆ„Ç¢„Çª„ÉÉ„Éà„ÅåÂ§â„Çè„Å£„Åü„Çâ„ÄÅÂèÇÁÖß„Åó„Å¶„ÅÑ„Åù„ÅÜ„Å™md„ÇíÂ∫É„ÇÅ„Å´Êãæ„ÅÜÔºàÁ∞°ÊòìÁâàÔºâ
          ASSET_CHANGED=$(git diff --name-only --diff-filter=ACMR "${BASE_SHA}" HEAD | grep -E '^public/.*\.(png|jpg|jpeg|gif|svg|webp)$' || true)
          if [ -n "${ASSET_CHANGED}" ]; then
            # „Ç¢„Çª„ÉÉ„Éà„ÅåÂ§â„Çè„Å£„Åü„Çâ public/*.md „ÇíÂÖ®ÂèñÂæóÔºàÂé≥ÂØÜ„Å´ÂèÇÁÖßËøΩË∑°„Åô„Çã„Çà„ÇäÂÆâÂÖ®Ôºâ
            CHANGED="$(printf "%s\n%s" "$CHANGED" "$(find public -name '*.md') " | sort -u)"
          fi

          if [ -z "${CHANGED}" ]; then
            echo "No markdown changes."
            echo "files=" >> $GITHUB_OUTPUT
          else
            echo "Changed files:"
            echo "${CHANGED}"
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "${CHANGED}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      # 1Êú¨„Åö„Å§ publishÔºà„Å©„Çå„ÅßËêΩ„Å°„Åü„ÅãÂà§Âà•„Åó„ÇÑ„Åô„Åè„ÄÅÈÉ®ÂàÜÊàêÂäü„ÇÇÂèØÔºâ
      - name: Publish changed markdowns
        if: steps.diff.outputs.files != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "== Target files =="; printf '%s\n' "${{ steps.diff.outputs.files }}"
      
          echo "${{ steps.diff.outputs.files }}" | while IFS= read -r f; do
            [ -z "$f" ] && continue
            [ ! -f "$f" ] && { echo "::warning::skip $f (not found)"; continue; }
            grep -qE '^ignorePublish:\s*true' "$f" && { echo "skip $f (ignorePublish: true)"; continue; }
      
            # „É≠„Ç∞Áî®
            echo "--- head of $f ---"; head -n 15 "$f" || true; echo "-------------------"
      
            # public/„ÇíÂ§ñ„Åó„Å¶ basenameÔºàÊã°ÂºµÂ≠ê„Å™„ÅóÔºâ„Å´Â§âÊèõ
            rel="${f#public/}"                 # ‰æã: open-creater-250812.md
            base="${rel##*/}"                  # ‰æã: open-creater-250812.md
            name="${base%.md}"                 # ‰æã: open-creater-250812  ‚Üê „Åì„Çå„ÇíÊ∏°„Åô
      
            echo "=== Publish (basename) $name ==="
            npx qiita publish "$name" --verbose
          done


      # „ÄêÊñ∞Ë¶èËøΩÂä†„ÄëGASÈÄöÁü•Â∞ÇÁî®„Çπ„ÉÜ„ÉÉ„Éó
      - name: Notify published articles to GAS
        if: steps.diff.outputs.files != ''
        shell: bash
        env:
          GAS_WEBHOOK_URL: ${{ secrets.GAS_WEBHOOK_URL }}
          GAS_TOKEN: ${{ secrets.GAS_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "=== Collecting published articles info ==="
          
          echo "${{ steps.diff.outputs.files }}" | while IFS= read -r f; do
            [ -z "$f" ] && continue
            [ ! -f "$f" ] && continue
            grep -qE '^ignorePublish:\s*true' "$f" && continue
            
            # Qiita„ÅÆID„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàÂÖ¨ÈñãÊ∏à„Åø„ÅÆÂà§ÂÆöÔºâ
            qiita_id=$(grep '^id:' "$f" | sed 's/^id: *"*\(.*\)"* *$/\1/' | sed 's/"$//')
            
            if [ -n "$qiita_id" ] && [ "$qiita_id" != "" ]; then
              # „Çø„Ç§„Éà„É´ÂèñÂæó
              title=$(grep '^title:' "$f" | sed 's/^title: *"*\(.*\)"* *$/\1/' | sed 's/"$//')
              qiita_url="https://qiita.com/items/$qiita_id"
              
              rel="${f#public/}"
              base="${rel##*/}"
              name="${base%.md}"
              
              echo "üìù Found published article: $title -> $qiita_url"
              
              # GASÈÄöÁü•Âá¶ÁêÜ
              if [ -n "${GAS_WEBHOOK_URL:-}" ]; then
                payload=$(cat <<EOF
          {
            "source": "qiita_rss",
            "secret": "$GAS_TOKEN",
            "serviceName": "$title",
            "qiitaUrl": "$qiita_url",
            "publishedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "author": "$(whoami)",
            "qiita_id": "$qiita_id",
            "filename": "$name",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}"
          }
          EOF
                )
                
                echo "üîî Notifying GAS for: $title"
                
                curl_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d "$payload" \
                  "$GAS_WEBHOOK_URL" || echo "HTTPSTATUS:000")
                
                http_code=$(echo "$curl_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
                response_body=$(echo "$curl_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
                
                if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
                  echo "‚úÖ GAS notification successful for: $title"
                  echo "Response: $response_body"
                else
                  echo "‚ö†Ô∏è  GAS notification failed for: $title (HTTP $http_code)"
                  echo "Response: $response_body"
                fi
              else
                echo "‚ö†Ô∏è  GAS_WEBHOOK_URL not set, skipping notification"
              fi
            else
              echo "‚ÑπÔ∏è  No Qiita ID found in $f (not published or failed)"
            fi
          done

      # „ÄêÊó¢Â≠òÂá¶ÁêÜ„ÄëÂ§âÊõ¥„ÅÆÊõ∏„ÅçÊàª„Åó
      - name: Commit & push if changed (write back IDs etc.)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "chore(qiita): write back item IDs"
            git push
          fi
